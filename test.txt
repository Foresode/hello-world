import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'dart:convert';
import 'package:connectivity_plus/connectivity_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter WebView Cache Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WebViewCachePage(),
    );
  }
}

class WebViewCachePage extends StatefulWidget {
  @override
  _WebViewCachePageState createState() => _WebViewCachePageState();
}

class _WebViewCachePageState extends State<WebViewCachePage> {
  late final WebViewController _controller;
  final TextEditingController _urlController = TextEditingController(text: 'https://example.com');
  bool _isAlertShown = false;

  @override
  void initState() {
    super.initState();

    // 初始化 WebViewController
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageFinished: (url) async {
            try {
              // 缓存页面内容
              String htmlContent = await _controller.runJavaScriptReturningResult(
                "window.document.getElementsByTagName('html')[0].outerHTML;"
              ) as String;

              if (htmlContent.isNotEmpty) {
                print('HTML content to cache: $htmlContent');
                await _cacheHtmlContent(_urlController.text, htmlContent);
                print('Page cached successfully');
              } else {
                print('Failed to retrieve page content for caching');
              }
            } catch (e) {
              print('Error caching page: $e');
            }
          },
          onWebResourceError: (error) {
            print('Failed to load page: $error');
            if (error.errorCode == -2) {
              _showNoConnectionMessage();
            }
          },
        ),
      );

    // 启动时检查缓存并加载缓存页面
    _checkCacheOnStartup();
  }

  Future<void> _checkCacheOnStartup() async {
    String url = _urlController.text.trim();

    if (!url.startsWith('http')) {
      url = 'https://' + url;
    }

    bool cacheLoaded = await _loadCachedPage(url);

    if (!cacheLoaded) {
      var connectivityResult = await Connectivity().checkConnectivity();
      if (connectivityResult != ConnectivityResult.none) {
        _controller.loadRequest(Uri.parse(url));
      } else {
        _showNoConnectionMessage();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Cache Browser'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _checkCacheThenLoad,
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _urlController,
                    decoration: InputDecoration(
                      hintText: 'Enter URL',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.url,
                    onSubmitted: (_) => _checkCacheThenLoad(),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.arrow_forward),
                  onPressed: _checkCacheThenLoad,
                ),
              ],
            ),
          ),
          Expanded(
            child: WebViewWidget(controller: _controller),
          ),
        ],
      ),
    );
  }

  Future<void> _checkCacheThenLoad() async {
    String url = _urlController.text.trim();

    if (!url.startsWith('http')) {
      url = 'https://' + url;
    }

    var connectivityResult = await Connectivity().checkConnectivity();

    if (connectivityResult == ConnectivityResult.none) {
      print('No network, loading cached page...');
      bool cacheLoaded = await _loadCachedPage(url);
      if (!cacheLoaded && !_isAlertShown) {
        _showNoConnectionMessage();
      }
    } else {
      print('Network available, loading online page...');
      _controller.loadRequest(Uri.parse(url)).then((_) {
        print('Online page loaded, caching new content...');
      });
    }
  }

  Future<bool> _loadCachedPage(String url) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final filePath = '${directory.path}/cached_${_sanitizeUrl(url)}.html';
      final file = File(filePath);
      print('Attempting to load cached page from $filePath');

      if (await file.exists()) {
        String cachedHtml = await file.readAsString();
        print('Cached HTML content: $cachedHtml');

        final uri = Uri.dataFromString(
          cachedHtml,
          mimeType: 'text/html',
          encoding: Encoding.getByName('utf-8'),
        );

        _controller.loadRequest(uri);  // 使用 loadRequest 加载 data URI

        return true;
      } else {
        print('No cached page available for this URL');
        return false;
      }
    } catch (e) {
      print('Failed to load cached page: $e');
      return false;
    }
  }

  Future<void> _cacheHtmlContent(String url, String content) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final filePath = '${directory.path}/cached_${_sanitizeUrl(url)}.html';
      final file = File(filePath);
      await file.writeAsString(content);
      print('HTML content cached successfully at $filePath');
    } catch (e) {
      print('Failed to cache HTML content: $e');
    }
  }

  void _showNoConnectionMessage() {
    if (_isAlertShown) return;

    _isAlertShown = true;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('No Connection'),
        content: Text('No internet connection and no cached page available.'),
        actions:
