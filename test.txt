import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'dart:convert';
import 'package:connectivity_plus/connectivity_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter WebView Cache Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WebViewCachePage(),
    );
  }
}

class WebViewCachePage extends StatefulWidget {
  @override
  _WebViewCachePageState createState() => _WebViewCachePageState();
}

class _WebViewCachePageState extends State<WebViewCachePage> {
  late final WebViewController _controller;

  @override
  void initState() {
    super.initState();

    // 初始化 WebViewController
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageFinished: (url) async {
            // 获取网页内容并缓存到本地
            String htmlContent = await _controller.runJavaScriptReturningResult(
              "window.document.getElementsByTagName('html')[0].outerHTML;"
            ) as String;
            await _cacheHtmlContent(htmlContent);
          },
        ),
      );

    // 检查网络并加载相应的页面
    _checkNetworkAndLoadPage();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Page Cache'),
      ),
      body: WebViewWidget(controller: _controller),
      floatingActionButton: FloatingActionButton(
        onPressed: _loadCachedPage,
        child: Icon(Icons.offline_pin),
      ),
    );
  }

  // 检查网络状态并加载页面
  Future<void> _checkNetworkAndLoadPage() async {
    var connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
      // 没有网络时加载缓存的页面
      await _loadCachedPage();
    } else {
      // 有网络时加载在线网页
      _controller.loadRequest(Uri.parse('https://example.com'));
    }
  }

  // 缓存网页内容到本地文件
  Future<void> _cacheHtmlContent(String content) async {
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/cached_page.html');
    await file.writeAsString(content);
    print('HTML content cached successfully');
  }

  // 加载缓存的网页内容
  Future<void> _loadCachedPage() async {
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/cached_page.html');
    if (await file.exists()) {
      String cachedHtml = await file.readAsString();
      _controller.loadRequest(Uri.dataFromString(
        cachedHtml,
        mimeType: 'text/html',
        encoding: Encoding.getByName('utf-8'),
      ));
    } else {
      print('No cached page available');
    }
  }
}
