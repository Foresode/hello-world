import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'dart:convert';
import 'package:connectivity_plus/connectivity_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter WebView Cache Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WebViewCachePage(),
    );
  }
}

class WebViewCachePage extends StatefulWidget {
  @override
  _WebViewCachePageState createState() => _WebViewCachePageState();
}

class _WebViewCachePageState extends State<WebViewCachePage> {
  late final WebViewController _controller;
  final TextEditingController _urlController = TextEditingController(text: 'https://example.com');  // 默认输入的网址

  @override
  void initState() {
    super.initState();

    // 初始化 WebViewController
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageFinished: (url) async {
            // 当页面加载完成时，缓存页面内容到本地
            String htmlContent = await _controller.runJavaScriptReturningResult(
              "window.document.getElementsByTagName('html')[0].outerHTML;"
            ) as String;
            await _cacheHtmlContent(_urlController.text, htmlContent);
          },
        ),
      );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Cache Browser'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _checkNetworkAndLoadPage,  // 刷新页面
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _urlController,
                    decoration: InputDecoration(
                      hintText: 'Enter URL',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.url,
                    onSubmitted: (_) => _checkNetworkAndLoadPage(), // 输入网址后加载页面
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.arrow_forward),
                  onPressed: _checkNetworkAndLoadPage, // 点击箭头加载页面
                ),
              ],
            ),
          ),
          Expanded(
            child: WebViewWidget(controller: _controller),
          ),
        ],
      ),
    );
  }

  // 检查网络状态并加载页面
  Future<void> _checkNetworkAndLoadPage() async {
    String url = _urlController.text.trim();

    // 如果用户输入的网址没有 http 前缀，自动添加
    if (!url.startsWith('http')) {
      url = 'https://' + url;
    }

    var connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
      print('No network connection, loading cached page...');
      await _loadCachedPage(url);
    } else {
      print('Network available, loading online page...');
      _controller.loadRequest(Uri.parse(url));
    }
  }

  // 缓存 HTML 内容到本地文件
  Future<void> _cacheHtmlContent(String url, String content) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/cached_${_sanitizeUrl(url)}.html');
      await file.writeAsString(content);
      print('HTML content cached successfully at ${file.path}');
    } catch (e) {
      print('Failed to cache HTML content: $e');
    }
  }

  // 从本地文件加载缓存的页面
  Future<void> _loadCachedPage(String url) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/cached_${_sanitizeUrl(url)}.html');
      if (await file.exists()) {
        String cachedHtml = await file.readAsString();
        print('Loaded cached page successfully');

        // 加载缓存页面
        _controller.loadRequest(Uri.dataFromString(
          cachedHtml,
          mimeType: 'text/html',
          encoding: Encoding.getByName('utf-8'),
        ));
      } else {
        print('No cached page available for this URL');
      }
    } catch (e) {
      print('Failed to load cached page: $e');
    }
  }

  // 清理 URL 以便用作文件名
  String _sanitizeUrl(String url) {
    return url.replaceAll(RegExp(r'[^\w]'), '_');
  }
}
