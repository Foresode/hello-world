import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'dart:io';
import 'dart:convert';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:path_provider/path_provider.dart';

class OfflineWebViewApp extends StatefulWidget {
  @override
  _OfflineWebViewAppState createState() => _OfflineWebViewAppState();
}

class _OfflineWebViewAppState extends State<OfflineWebViewApp> {
  late WebViewController _controller;
  bool _isOnline = false;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeController();
  }

  /// Initialize WebView controller and check network status
  Future<void> _initializeController() async {
    // Create WebView controller with JavaScript enabled
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted);

    // Check network status
    await _checkNetworkStatus();
  }

  /// Check network status
  Future<void> _checkNetworkStatus() async {
    var connectivityResult = await Connectivity().checkConnectivity();
    setState(() {
      _isOnline = connectivityResult != ConnectivityResult.none;
    });

    if (_isOnline) {
      // Load webpage and cache it for offline use
      await _controller.loadRequest(Uri.parse('https://example.com')).then((_) {
        _cacheWebPage();
      });
    } else {
      // Load cached HTML if offline
      String localHtml = await _loadHtmlFromLocal();
      if (localHtml.isNotEmpty) {
        _controller.loadUrl(Uri.dataFromString(
          localHtml,
          mimeType: 'text/html',
          encoding: utf8,
        ).toString());
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('No internet and no local cache available!'),
        ));
      }
    }
  }

  /// Cache the remote webpage content locally
  Future<void> _cacheWebPage() async {
    try {
      final htmlContent = await _controller.runJavaScriptReturningResult('document.documentElement.outerHTML');
      if (htmlContent != null) {
        final String processedHtml = htmlContent.toString().replaceAll(r'\"', '"').replaceAll(r'\n', '');
        final directory = await getApplicationDocumentsDirectory();
        final file = File('${directory.path}/offline_page.html');
        await file.writeAsString(processedHtml);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('Page cached for offline use'),
        ));
      }
    } catch (e) {
      print('Error caching webpage: $e');
    }
  }

  /// Load the cached HTML from local storage
  Future<String> _loadHtmlFromLocal() async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/offline_page.html');
      return await file.readAsString();
    } catch (e) {
      print('Error loading local HTML: $e');
      return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Offline WebView Example"),
      ),
      body: Stack(
        children: [
          WebViewWidget(
            controller: _controller, // Use the controller directly here
          ),
          if (_isLoading)
            Center(
              child: CircularProgressIndicator(),
            ),
        ],
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: OfflineWebViewApp(),
  ));
}
