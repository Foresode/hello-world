import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'dart:convert';
import 'package:connectivity_plus/connectivity_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter WebView Cache Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WebViewCachePage(),
    );
  }
}

class WebViewCachePage extends StatefulWidget {
  @override
  _WebViewCachePageState createState() => _WebViewCachePageState();
}

class _WebViewCachePageState extends State<WebViewCachePage> {
  late final WebViewController _controller;
  final TextEditingController _urlController = TextEditingController(text: 'https://example.com');

  @override
  void initState() {
    super.initState();

    // 初始化 WebViewController
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageFinished: (url) async {
            try {
              // 当页面加载完成时，缓存页面内容到本地
              String htmlContent = await _controller.runJavaScriptReturningResult(
                "window.document.getElementsByTagName('html')[0].outerHTML;"
              ) as String;
              await _cacheHtmlContent(_urlController.text, htmlContent);
              print('Page cached successfully');
            } catch (e) {
              print('Error caching page: $e');
            }
          },
          onWebResourceError: (error) {
            print('Failed to load page: $error');
            if (error.errorCode == -2) {
              // 捕获断网错误并避免 WebView 自动重试
              _showNoConnectionMessage();
            }
          },
        ),
      );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Cache Browser'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _checkCacheThenLoad, // 点击刷新时优先检查缓存
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _urlController,
                    decoration: InputDecoration(
                      hintText: 'Enter URL',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.url,
                    onSubmitted: (_) => _checkCacheThenLoad(),  // 回车时优先检查缓存
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.arrow_forward),
                  onPressed: _checkCacheThenLoad, // 点击箭头时优先检查缓存
                ),
              ],
            ),
          ),
          Expanded(
            child: WebViewWidget(controller: _controller),
          ),
        ],
      ),
    );
  }

  // 优先加载缓存页面，再检查网络并加载在线页面
  Future<void> _checkCacheThenLoad() async {
    String url = _urlController.text.trim();

    // 如果用户输入的网址没有 http 前缀，自动添加
    if (!url.startsWith('http')) {
      url = 'https://' + url;
    }

    // 1. 检查网络状态
    var connectivityResult = await Connectivity().checkConnectivity();

    // 2. 无网络时加载缓存页面
    if (connectivityResult == ConnectivityResult.none) {
      print('No network, loading cached page...');
      bool cacheLoaded = await _loadCachedPage(url);
      if (!cacheLoaded) {
        _showNoConnectionMessage(); // 没有网络且没有缓存时，显示提示
      }
    } else {
      // 3. 有网络时加载在线页面
      print('Network available, loading online page...');
      _controller.loadRequest(Uri.parse(url)).then((_) {
        print('Online page loaded, caching new content...');
      });
    }
  }

  // 从本地缓存加载页面，返回是否成功加载缓存
  Future<bool> _loadCachedPage(String url) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/cached_${_sanitizeUrl(url)}.html');
      if (await file.exists()) {
        String cachedHtml = await file.readAsString();
        print('Loaded cached page successfully: $cachedHtml');

        // 使用本地缓存内容加载 WebView
        _controller.loadRequest(
          Uri.dataFromString(
            cachedHtml,
            mimeType: 'text/html',
            encoding: Encoding.getByName('utf-8'),
          ),
        );
        return true; // 成功加载缓存
      } else {
        print('No cached page available for this URL');
        return false; // 没有找到缓存
      }
    } catch (e) {
      print('Failed to load cached page: $e');
      return false; // 加载缓存失败
    }
  }

  // 缓存 HTML 内容到本地文件
  Future<void> _cacheHtmlContent(String url, String content) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/cached_${_sanitizeUrl(url)}.html');
      await file.writeAsString(content);
      print('HTML content cached successfully at ${file.path}');
    } catch (e) {
      print('Failed to cache HTML content: $e');
    }
  }

  // 显示无连接时的错误信息
  void _showNoConnectionMessage() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('No Connection'),
        content: Text('No internet connection and no cached page available.'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text('OK'),
          ),
        ],
      ),
    );
  }

  // 清理 URL 以便用作文件名
  String _sanitizeUrl(String url) {
    return url.replaceAll(RegExp(r'[^\w]'), '_');
  }
}
