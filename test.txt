import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'dart:io';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'package:html/parser.dart' as html_parser;

class OfflineWebViewApp extends StatefulWidget {
  @override
  _OfflineWebViewAppState createState() => _OfflineWebViewAppState();
}

class _OfflineWebViewAppState extends State<OfflineWebViewApp> {
  late WebViewController _controller;
  bool _isOnline = false;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeController();
  }

  Future<void> _initializeController() async {
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted);
    
    await _checkNetworkStatus();
  }

  Future<void> _checkNetworkStatus() async {
    var connectivityResult = await Connectivity().checkConnectivity();
    setState(() {
      _isOnline = connectivityResult != ConnectivityResult.none;
    });

    if (_isOnline) {
      await _downloadAndCacheWebPage('https://www.baidu.com');
    } else {
      String localHtml = await _loadHtmlFromLocal();
      if (localHtml.isNotEmpty) {
        _controller.loadRequest(Uri.dataFromString(
          localHtml,
          mimeType: 'text/html',
          encoding: utf8,
        ));
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('No internet and no local cache available!'),
        ));
      }
    }
  }

  Future<void> _downloadAndCacheWebPage(String url) async {
    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      // 解析 HTML
      final document = html_parser.parse(response.body);

      // 保存 HTML
      final directory = await getApplicationDocumentsDirectory();
      final htmlFile = File('${directory.path}/offline_page.html');
      await htmlFile.writeAsString(response.body);

      // 处理资源
      final scripts = document.getElementsByTagName('script');
      final links = document.getElementsByTagName('link');
      final images = document.getElementsByTagName('img');

      // 下载 CSS 文件
      for (var link in links) {
        final href = link.attributes['href'];
        if (href != null) {
          await _downloadResource(href, directory);
        }
      }

      // 下载 JavaScript 文件
      for (var script in scripts) {
        final src = script.attributes['src'];
        if (src != null) {
          await _downloadResource(src, directory);
        }
      }

      // 下载图片
      for (var img in images) {
        final src = img.attributes['src'];
        if (src != null) {
          await _downloadResource(src, directory);
        }
      }

      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Page and resources cached for offline use'),
      ));

      // 加载本地 HTML
      String localHtml = await _loadHtmlFromLocal();
      _controller.loadRequest(Uri.dataFromString(
        localHtml,
        mimeType: 'text/html',
        encoding: utf8,
      ));
    } else {
      print('Failed to download the webpage.');
    }
  }

  Future<void> _downloadResource(String url, Directory directory) async {
    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        final fileName = url.split('/').last;
        final file = File('${directory.path}/$fileName');
        await file.writeAsBytes(response.bodyBytes);

        print('Downloaded: $url');
      }
    } catch (e) {
      print('Error downloading resource: $e');
    }
  }

  Future<String> _loadHtmlFromLocal() async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/offline_page.html');
      return await file.readAsString();
    } catch (e) {
      print('Error loading local HTML: $e');
      return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Offline WebView Example"),
      ),
      body: WebViewWidget(
        controller: _controller,
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: OfflineWebViewApp(),
  ));
}
