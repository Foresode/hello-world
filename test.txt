import 'package:flutter/material.dart';
import 'dart:io';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';  // Android 平台的 WebView
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart'; // iOS 平台的 WebView

class OfflineWebViewApp extends StatefulWidget {
  @override
  _OfflineWebViewAppState createState() => _OfflineWebViewAppState();
}

class _OfflineWebViewAppState extends State<OfflineWebViewApp> {
  late WebViewController _controller;
  bool _isOnline = false;

  @override
  void initState() {
    super.initState();

    // 在 Android 平台上必须在初始化 WebView 之前调用
    if (Platform.isAndroid) {
      WebViewPlatform.instance = AndroidWebView();  // 使用 Android WebView
    } else if (Platform.isIOS) {
      WebViewPlatform.instance = CupertinoWebView();  // 使用 iOS WebView
    }

    // 检查网络状态
    _checkNetworkStatus();
  }

  /// 检查网络状态
  Future<void> _checkNetworkStatus() async {
    var connectivityResult = await Connectivity().checkConnectivity();
    setState(() {
      _isOnline = connectivityResult != ConnectivityResult.none;
    });

    if (_isOnline) {
      // 有网络时加载远程网页并缓存
      _controller.loadRequest(Uri.parse('https://example.com'));
      _cacheWebPage();
    } else {
      // 无网络时加载本地缓存的网页
      String localHtml = await _loadHtmlFromLocal();
      if (localHtml.isNotEmpty) {
        _controller.loadHtmlString(localHtml);
      } else {
        // 本地缓存为空时提示
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('No internet and no local cache available!'),
        ));
      }
    }
  }

  /// 将远程网页内容缓存到本地
  Future<void> _cacheWebPage() async {
    try {
      final htmlContent = await _controller.runJavascriptReturningResult(
          'document.documentElement.outerHTML');
      if (htmlContent != null) {
        final directory = await getApplicationDocumentsDirectory();
        final file = File('${directory.path}/offline_page.html');
        await file.writeAsString(htmlContent);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('Page cached for offline use'),
        ));
      }
    } catch (e) {
      print('Error caching webpage: $e');
    }
  }

  /// 从本地加载缓存的 HTML 页面
  Future<String> _loadHtmlFromLocal() async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/offline_page.html');
      return await file.readAsString();
    } catch (e) {
      print('Error loading local HTML: $e');
      return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Offline WebView Example"),
      ),
      body: WebViewWidget(controller: _controller), // 使用 WebViewWidget
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: OfflineWebViewApp(),
  ));
}
